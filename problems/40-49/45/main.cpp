#include <iostream>
#include <list>
using namespace std;

/*
Triangle, pentagonal, and hexagonal numbers are generated by the following 
formulae:

Triangle	 	T n = n ( n + 1) / 2 =    1 , 3 , 6 , 10 , 15 , …
Pentagonal	 	P n = n ( 3 n − 1) / 2  = 1 , 5 , 12 , 22 , 35 , …
Hexagonal	 	H n = n ( 2 n − 1)      = 1 , 6 , 15 , 28 , 45 , …

It can be verified that 
T 285 = P 165 = H 143 = 40755
.

Find the next triangle number that is also pentagonal and hexagonal.
*/

unsigned int triangle_number(unsigned int n) { return n * (n + 1) / 2; }
unsigned long triangle_number(unsigned long n) { return n * (n + 1) / 2; }

unsigned int pentagonal_number(unsigned int n) { return n * (3*n - 1) / 2; }
unsigned long pentagonal_number(unsigned long n) { return n * (3*n - 1) / 2; }

unsigned int hexagonal_number(unsigned int n) { return n * (2*n - 1); }
unsigned long hexagonal_number(unsigned long n) { return n * (2*n - 1); }


unsigned int
add_to_list_until (
    unsigned int nadded,
    unsigned int hex_max, 
    unsigned int (*func) (unsigned int)
) {
    unsigned int next_number;
    while ((next_number = func(nadded)) < hex_max){ nadded++; }
    return nadded;
}



int main () {

    // init lists
    unsigned int tn = 1; unsigned int pn = 1; unsigned int hn = 1;

    int nfound = 0;

    while (nfound < 2) {
        // try to add a hexagonal number; but check the last elements of both lists
        unsigned int next_hexagonal = hexagonal_number(hn + 1);
        // cout << next_hexagonal << endl;
        tn = add_to_list_until(tn, next_hexagonal, &triangle_number);
        pn = add_to_list_until(pn, next_hexagonal, &pentagonal_number);

        if (triangle_number(tn) == pentagonal_number(pn) && 
            triangle_number(tn) == next_hexagonal) {
            cout << "found triangle = pentagonal = hexagaonal = " ;
            cout << next_hexagonal << endl; 
            cout << "tn: " << tn << endl;
            cout << "pn: " << pn << endl;
            cout << "hn: " << hn << endl;
            nfound++;
        }
        hn++;
    }
}