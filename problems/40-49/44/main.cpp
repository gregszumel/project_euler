#include <iostream>
#include <list>
using namespace std;

/*
Pentagonal numbers are generated by the formula, P_n = n ( 3n − 1) / 2 . 
The first ten pentagonal numbers are: 

1 , 5 , 12 , 22 , 35 , 51 , 70 , 92 , 117 , 145 , …

It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8 . However, their difference, 

70 − 22 = 48 , is not pentagonal.

Find the pair of pentagonal numbers, P_j and P_k , for which their sum and 
difference are pentagonal and D = | P_k − P_j | is minimised; 

what is the value of D?
*/

unsigned long triangle_number(unsigned long n) {
    return n * (3 * n - 1) / 2;
}


unsigned long contains (list<unsigned long> elements, unsigned long x) {
    for(unsigned long n: elements) {
        if (n == x) return true;
    }
    return false;
}


int main() {
    list<unsigned long> triangle_numbers = {1, 5};
    unsigned long next_triangle_number = 0;
    unsigned long D = -1;

    int n = 3;
    while ((next_triangle_number - triangle_numbers.back()) < D) {
        cout << next_triangle_number - triangle_numbers.back() << ", " << D << endl;
        std::list<unsigned long>::iterator iter = triangle_numbers.begin();
        // cout << "next triangle number: " << next_triangle_number << endl;

        for (iter; iter != triangle_numbers.end(); iter++) {
            std::list<unsigned long>::iterator iter2 = iter;
            iter2++;
            unsigned long target = next_triangle_number - *iter;
            // cout << "iter is " << *iter << " and target is " << target << endl;

            for (iter2; iter2 != triangle_numbers.end(); iter2++) {
                // cout << "checking " << *iter2 << endl;
                if (*iter2 == target) {
                    unsigned long diff = *iter2 - *iter;
                    // cout << "Found a potential sum " << *iter << ", " << *iter2 << " with diff " << diff << endl;
                    if (contains(triangle_numbers, diff)) {
                        D = min({D, diff}); 
                        cout << "New potential D, at " << D << " -- iter: " << *iter << " iter2: " << *iter2 << endl;
                    }
                }
                else if (*iter2 > target) break;
            }
        }
        triangle_numbers.push_back(next_triangle_number);
        n++;
        next_triangle_number = triangle_number(n);
    }
    cout << "Ended" << endl;
}