#include <iostream>
#include <list>
using namespace std;

/*
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5 :
 
2^2 =4,	2^3 =8,	2^4 =16, 2^5 =32	
3^2 =9,	3^3 =27,	3^4 =81,	3^5 =243	
4^2 =16,	4^3 =64,	4^4 =256,	4^5 =1024	
5^2 =25,	5^3 =125,	5^4 =625,	5^5 =3125 
If they are then placed in numerical order, with any repeats removed, we get the
following sequence of 15 distinct terms:
4 , 8 , 9 , 16 , 25 , 27 , 32 , 64 , 81 , 125 , 243 , 256 , 625 , 1024 , 3125.

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 
2 ≤ b ≤ 100 ?
*/

// checks if two vectors are equal
bool equal(int all_prime_factors[], int a1, int b1, int a2, int b2, int size) {
    // iterate through every factor of the prime factors at a1, b1 and a2, b2
    for (int i = 2; i < 100; i++) {
        // cout << "equal: " << i << ", " << a1 << ", " << b1;
        // cout << ", " << a2 << ", " << b2 << "(" << (b2-1) * size * size << ")" << endl;
        int i1 = all_prime_factors[(i-1) + (a1-1) * size + (b1-1) * size*size];
        int i2 = all_prime_factors[(i-1) + (a2-1) * size + (b2-1) * size*size];
        // if the two elements don't match at some point, then return false
        if (i1 != i2) {
            // cout << "found a non-equal when checking at " << a1 <<", " << b1 ;
            // cout << " and " << a2 << ", " << b2 << ": " << i1 << ", " << i2 << endl;
            return false;
        }
    }
    // otherwise return true
    // cout << "found an equal when checking at " << a1 <<", " << b1 << " and " << a2 << ", " << b2 << endl;
    return true;
}

// get prime factors of a num
void set_prime_factorization(int all_prime_factors[], int a, int b, int size) {
    int curr_divisor = 2;
    int copied_num = a;
    while (curr_divisor <= a) {
        if (copied_num % curr_divisor == 0) {
            // cout << "set" << curr_divisor << ", " << a << ", " << b << endl;
            all_prime_factors[(curr_divisor-1) + (a-1) * 100 + (b-1) * 10000] += b;
            copied_num = copied_num / curr_divisor;
        } 
        else if (curr_divisor > copied_num) break; 
        else curr_divisor += 1;
    }
    return;
}

void verify_if_new(int all_prime_factors[], int a, int b, int size) {
    for (int a_check = 2; a_check < a; a_check++) {
        for (int b_check = 2; b_check <= size; b_check++) {
            if (equal(all_prime_factors, a, b, a_check, b_check, size)) {
                return;
            }
        }
    }
    all_prime_factors[0 + (a-1) * 100 + (b-1) * 10000] = 1;
    return;
}

int main() {
    int sum = 0;
    int size = 100;

    int all_factorizations[size * size * size];
    for (int i = 0; i < size * size * size; i++) all_factorizations[i] = 0;

    for (int a = 2; a <= size; a++) {
        for (int b = 2; b <= size; b++) {
            // cout << "main" << a << b << endl;
            set_prime_factorization(all_factorizations, a, b, size);
            verify_if_new(all_factorizations, a, b, size);
        }
    }

    for (int a = 0; a < size; a++) {
        for (int b = 0; b < size; b++) {
            // if (all_factorizations[0 + a * size + b * size * size] == 0) cout << "SEEN! ";
            // cout << (a+1) << ", " <<  (b+1) << ": ";
            if (all_factorizations[0 + a * size + b * size * size] == 1) sum += 1;
            // for (int s = 0; s < size; s++) {
                // cout << all_factorizations[s + a * size + b * size * size] << ", ";
            // }
            // cout << endl;
        }
    }
    cout << sum << endl;  // 9183
}