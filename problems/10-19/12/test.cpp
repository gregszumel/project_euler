#include <iostream>
#include <algorithm>
#include <string>
#include<map>
#include <list>
using namespace std;

/*

The sequence of triangle numbers is generated by adding the natural numbers. So 
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten 
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred 
divisors?

*/


/// @brief iterate through each potential divisor less than the sqrt of num. 
///        if the potential divisor (i) is sqrt, add one. Otherwise, if its 
///        divisible add two, for the one we found and its complement

/// @param num : the number to count the number of divisors of
/// @return ndivisors : the number of divisors for num
int get_num_divisors(long long num) {
    int ndivisors = 0;
    for (long long i = 1; i < num; i++) {
        if      ((num % i) == 0 && sqrt(num) == i) ndivisors++;
        else if ((num % i) == 0 && sqrt(num) != i) ndivisors = ndivisors + 2;
        else if (i > sqrt(num)) return ndivisors;
    }
    return ndivisors;
}


int main() {
    int triangle_number_counter = 0;
    long long triangle_number = 0;
    int natural_number = 0;
    while (true) {
        natural_number++;
        triangle_number_counter++;
        triangle_number = triangle_number + natural_number;
        int ndivisors = get_num_divisors(triangle_number);

        // if ((natural_number  % 1000) == 0) cout << triangle_number << ": " << ndivisors << endl;

        if (ndivisors > 500) break;
    }
    cout << triangle_number << endl; // 76576500
}
